/*
 * e-Fatura API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: helpdesk@efatura.cv
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.kriolos.efatura.clientapi.generated.api;

import io.github.kriolos.efatura.clientapi.generated.*;
import io.github.kriolos.efatura.clientapi.generated.auth.*;
import io.github.kriolos.efatura.clientapi.generated.model.PayloadProcessingResponseBoolean;
import io.github.kriolos.efatura.clientapi.generated.model.PayloadProcessingResponseListSoftwareCustomerDto;
import io.github.kriolos.efatura.clientapi.generated.model.PayloadProcessingResponseListSoftwareDto;
import io.github.kriolos.efatura.clientapi.generated.model.PayloadProcessingResponseListSoftwareGroupMemberDto;
import io.github.kriolos.efatura.clientapi.generated.model.PayloadProcessingResponseListSoftwareTransmitterDto;
import io.github.kriolos.efatura.clientapi.generated.model.PayloadProcessingResponseSoftwareCustomerDto;
import io.github.kriolos.efatura.clientapi.generated.model.PayloadProcessingResponseSoftwareCustomerEntity;
import io.github.kriolos.efatura.clientapi.generated.model.PayloadProcessingResponseSoftwareGroupMemberDto;
import io.github.kriolos.efatura.clientapi.generated.model.PayloadProcessingResponseSoftwareGroupMemberEntity;
import io.github.kriolos.efatura.clientapi.generated.model.PayloadProcessingResponseSoftwareTransmitterDto;
import io.github.kriolos.efatura.clientapi.generated.model.PayloadProcessingResponseSoftwareTransmitterEntity;
import io.github.kriolos.efatura.clientapi.generated.model.SoftwareCustomerEntity;
import io.github.kriolos.efatura.clientapi.generated.model.SoftwareGroupMemberEntity;
import io.github.kriolos.efatura.clientapi.generated.model.SoftwareTransmitterEntity;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SoftwareApi
 */
public class SoftwareApiTest {

    private final SoftwareApi api = new SoftwareApi();

    /**
     * Regista um novo contribuinte cliente de software.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void softwareResourceCreateSoftwareCustomerTest() throws ApiException {
        //SoftwareCustomerEntity softwareCustomerEntity = null;
        //PayloadProcessingResponseSoftwareCustomerEntity response = api.softwareResourceCreateSoftwareCustomer(softwareCustomerEntity);
        // TODO: test validations
    }

    /**
     * Regista novo membro de grupo de software.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void softwareResourceCreateSoftwareGroupMemberTest() throws ApiException {
        //SoftwareGroupMemberEntity softwareGroupMemberEntity = null;
        //PayloadProcessingResponseSoftwareGroupMemberEntity response = api.softwareResourceCreateSoftwareGroupMember(softwareGroupMemberEntity);
        // TODO: test validations
    }

    /**
     * Regista novo transmissor.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void softwareResourceCreateSoftwareTransmitterTest() throws ApiException {
        //SoftwareTransmitterEntity softwareTransmitterEntity = null;
        //PayloadProcessingResponseSoftwareTransmitterEntity response = api.softwareResourceCreateSoftwareTransmitter(softwareTransmitterEntity);
        // TODO: test validations
    }

    /**
     * Elimina um contribuinte cliente de software.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void softwareResourceDeleteSoftwareCustomerTest() throws ApiException {
        //String id = null;
        //PayloadProcessingResponseBoolean response = api.softwareResourceDeleteSoftwareCustomer(id);
        // TODO: test validations
    }

    /**
     * Elimina um membro de grupo de software.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void softwareResourceDeleteSoftwareGroupMemberTest() throws ApiException {
        //String id = null;
        //PayloadProcessingResponseBoolean response = api.softwareResourceDeleteSoftwareGroupMember(id);
        // TODO: test validations
    }

    /**
     * Elimina um transmissor.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void softwareResourceDeleteSoftwareTransmitterTest() throws ApiException {
        //String id = null;
        //PayloadProcessingResponseBoolean response = api.softwareResourceDeleteSoftwareTransmitter(id);
        // TODO: test validations
    }

    /**
     * Consulta contribuinte cliente de software com ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void softwareResourceReadSoftwareCustomerByIdTest() throws ApiException {
        //String id = null;
        //PayloadProcessingResponseSoftwareCustomerDto response = api.softwareResourceReadSoftwareCustomerById(id);
        // TODO: test validations
    }

    /**
     * Lista contribuintes clientes de software.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void softwareResourceReadSoftwareCustomerListTest() throws ApiException {
        //PayloadProcessingResponseListSoftwareCustomerDto response = api.softwareResourceReadSoftwareCustomerList();
        // TODO: test validations
    }

    /**
     * Consulta de membro de grupo de software com ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void softwareResourceReadSoftwareGroupMemberByIdTest() throws ApiException {
        //String id = null;
        //PayloadProcessingResponseSoftwareGroupMemberDto response = api.softwareResourceReadSoftwareGroupMemberById(id);
        // TODO: test validations
    }

    /**
     * Lista de membros de grupo de software.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void softwareResourceReadSoftwareGroupMemberListTest() throws ApiException {
        //PayloadProcessingResponseListSoftwareGroupMemberDto response = api.softwareResourceReadSoftwareGroupMemberList();
        // TODO: test validations
    }

    /**
     * Lista de aplicações (software) de faturação/transmissão registadas na Plataforma Eletrónica.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void softwareResourceReadSoftwarePublicListTest() throws ApiException {
        //PayloadProcessingResponseListSoftwareDto response = api.softwareResourceReadSoftwarePublicList();
        // TODO: test validations
    }

    /**
     * Consulta transmissor com ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void softwareResourceReadSoftwareTransmitterByIdTest() throws ApiException {
        //String id = null;
        //PayloadProcessingResponseSoftwareTransmitterDto response = api.softwareResourceReadSoftwareTransmitterById(id);
        // TODO: test validations
    }

    /**
     * Lista de transmissores associados a software.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void softwareResourceReadSoftwareTransmitterListTest() throws ApiException {
        //PayloadProcessingResponseListSoftwareTransmitterDto response = api.softwareResourceReadSoftwareTransmitterList();
        // TODO: test validations
    }

    /**
     * Atualiza um contribuinte cliente de software.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void softwareResourceUpdateSoftwareCustomerTest() throws ApiException {
        //String id = null;
        //SoftwareCustomerEntity softwareCustomerEntity = null;
        //PayloadProcessingResponseSoftwareCustomerEntity response = api.softwareResourceUpdateSoftwareCustomer(id, softwareCustomerEntity);
        // TODO: test validations
    }

    /**
     * Ativa/Desativa um contribuinte cliente de software.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void softwareResourceUpdateSoftwareCustomerEnabledTest() throws ApiException {
        //String id = null;
        //SoftwareCustomerEntity softwareCustomerEntity = null;
        //PayloadProcessingResponseSoftwareCustomerEntity response = api.softwareResourceUpdateSoftwareCustomerEnabled(id, softwareCustomerEntity);
        // TODO: test validations
    }

    /**
     * Atualiza um membro de grupo de software.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void softwareResourceUpdateSoftwareGroupMemberTest() throws ApiException {
        //String id = null;
        //SoftwareGroupMemberEntity softwareGroupMemberEntity = null;
        //PayloadProcessingResponseSoftwareGroupMemberEntity response = api.softwareResourceUpdateSoftwareGroupMember(id, softwareGroupMemberEntity);
        // TODO: test validations
    }

    /**
     * Atualiza um transmissor.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void softwareResourceUpdateSoftwareTransmitterTest() throws ApiException {
        //String id = null;
        //SoftwareTransmitterEntity softwareTransmitterEntity = null;
        //PayloadProcessingResponseSoftwareTransmitterEntity response = api.softwareResourceUpdateSoftwareTransmitter(id, softwareTransmitterEntity);
        // TODO: test validations
    }

    /**
     * Ativa/Desativa um transmissor.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void softwareResourceUpdateSoftwareTransmitterEnabledTest() throws ApiException {
        //String id = null;
        //SoftwareTransmitterEntity softwareTransmitterEntity = null;
        //PayloadProcessingResponseSoftwareTransmitterEntity response = api.softwareResourceUpdateSoftwareTransmitterEnabled(id, softwareTransmitterEntity);
        // TODO: test validations
    }

}
