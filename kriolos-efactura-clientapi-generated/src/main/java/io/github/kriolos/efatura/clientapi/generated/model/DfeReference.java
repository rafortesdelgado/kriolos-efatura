/*
 * e-Fatura API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: helpdesk@efatura.cv
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.kriolos.efatura.clientapi.generated.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.kriolos.efatura.clientapi.generated.model.DfeFiscalDocument;
import io.github.kriolos.efatura.clientapi.generated.model.DfeLineTax;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import io.github.kriolos.efatura.clientapi.generated.JSON;


/**
 * DfeReference
 */
@JsonPropertyOrder({
  DfeReference.JSON_PROPERTY_FISCAL_DOCUMENT,
  DfeReference.JSON_PROPERTY_INNER_DOCUMENT_NUMBER,
  DfeReference.JSON_PROPERTY_PAYMENT_AMOUNT,
  DfeReference.JSON_PROPERTY_TAXES
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-13T18:43:44.521602200-01:00[Atlantic/Cape_Verde]")
public class DfeReference {
  public static final String JSON_PROPERTY_FISCAL_DOCUMENT = "FiscalDocument";
  private DfeFiscalDocument fiscalDocument;

  public static final String JSON_PROPERTY_INNER_DOCUMENT_NUMBER = "InnerDocumentNumber";
  private String innerDocumentNumber;

  public static final String JSON_PROPERTY_PAYMENT_AMOUNT = "PaymentAmount";
  private Double paymentAmount;

  public static final String JSON_PROPERTY_TAXES = "Taxes";
  private List<DfeLineTax> taxes = null;

  public DfeReference() { 
  }

  public DfeReference fiscalDocument(DfeFiscalDocument fiscalDocument) {
    this.fiscalDocument = fiscalDocument;
    return this;
  }

   /**
   * Get fiscalDocument
   * @return fiscalDocument
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FISCAL_DOCUMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DfeFiscalDocument getFiscalDocument() {
    return fiscalDocument;
  }


  @JsonProperty(JSON_PROPERTY_FISCAL_DOCUMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFiscalDocument(DfeFiscalDocument fiscalDocument) {
    this.fiscalDocument = fiscalDocument;
  }


  public DfeReference innerDocumentNumber(String innerDocumentNumber) {
    this.innerDocumentNumber = innerDocumentNumber;
    return this;
  }

   /**
   * Get innerDocumentNumber
   * @return innerDocumentNumber
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INNER_DOCUMENT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInnerDocumentNumber() {
    return innerDocumentNumber;
  }


  @JsonProperty(JSON_PROPERTY_INNER_DOCUMENT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInnerDocumentNumber(String innerDocumentNumber) {
    this.innerDocumentNumber = innerDocumentNumber;
  }


  public DfeReference paymentAmount(Double paymentAmount) {
    this.paymentAmount = paymentAmount;
    return this;
  }

   /**
   * Get paymentAmount
   * @return paymentAmount
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYMENT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getPaymentAmount() {
    return paymentAmount;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentAmount(Double paymentAmount) {
    this.paymentAmount = paymentAmount;
  }


  public DfeReference taxes(List<DfeLineTax> taxes) {
    this.taxes = taxes;
    return this;
  }

  public DfeReference addTaxesItem(DfeLineTax taxesItem) {
    if (this.taxes == null) {
      this.taxes = new ArrayList<>();
    }
    this.taxes.add(taxesItem);
    return this;
  }

   /**
   * Get taxes
   * @return taxes
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAXES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<DfeLineTax> getTaxes() {
    return taxes;
  }


  @JsonProperty(JSON_PROPERTY_TAXES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaxes(List<DfeLineTax> taxes) {
    this.taxes = taxes;
  }


  /**
   * Return true if this DfeReference object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DfeReference dfeReference = (DfeReference) o;
    return Objects.equals(this.fiscalDocument, dfeReference.fiscalDocument) &&
        Objects.equals(this.innerDocumentNumber, dfeReference.innerDocumentNumber) &&
        Objects.equals(this.paymentAmount, dfeReference.paymentAmount) &&
        Objects.equals(this.taxes, dfeReference.taxes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fiscalDocument, innerDocumentNumber, paymentAmount, taxes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DfeReference {\n");
    sb.append("    fiscalDocument: ").append(toIndentedString(fiscalDocument)).append("\n");
    sb.append("    innerDocumentNumber: ").append(toIndentedString(innerDocumentNumber)).append("\n");
    sb.append("    paymentAmount: ").append(toIndentedString(paymentAmount)).append("\n");
    sb.append("    taxes: ").append(toIndentedString(taxes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

