/*
 * e-Fatura API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: helpdesk@efatura.cv
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.kriolos.efatura.clientapi.generated.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.LocalDate;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import io.github.kriolos.efatura.clientapi.generated.JSON;


/**
 * EventSummary
 */
@JsonPropertyOrder({
  EventSummary.JSON_PROPERTY_ID,
  EventSummary.JSON_PROPERTY_EVENT_TYPE_CODE,
  EventSummary.JSON_PROPERTY_ISSUE_DATE_TIME,
  EventSummary.JSON_PROPERTY_ISSUE_REASON_DESCRIPTION,
  EventSummary.JSON_PROPERTY_AUTHORIZED_DATE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-14T16:43:35.596432800-01:00[Atlantic/Cape_Verde]")
public class EventSummary {
  public static final String JSON_PROPERTY_ID = "Id";
  private String id;

  public static final String JSON_PROPERTY_EVENT_TYPE_CODE = "EventTypeCode";
  private String eventTypeCode;

  public static final String JSON_PROPERTY_ISSUE_DATE_TIME = "IssueDateTime";
  private LocalDate issueDateTime;

  public static final String JSON_PROPERTY_ISSUE_REASON_DESCRIPTION = "IssueReasonDescription";
  private String issueReasonDescription;

  public static final String JSON_PROPERTY_AUTHORIZED_DATE = "AuthorizedDate";
  private LocalDate authorizedDate;

  public EventSummary() { 
  }

  public EventSummary id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public EventSummary eventTypeCode(String eventTypeCode) {
    this.eventTypeCode = eventTypeCode;
    return this;
  }

   /**
   * Get eventTypeCode
   * @return eventTypeCode
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EVENT_TYPE_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEventTypeCode() {
    return eventTypeCode;
  }


  @JsonProperty(JSON_PROPERTY_EVENT_TYPE_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEventTypeCode(String eventTypeCode) {
    this.eventTypeCode = eventTypeCode;
  }


  public EventSummary issueDateTime(LocalDate issueDateTime) {
    this.issueDateTime = issueDateTime;
    return this;
  }

   /**
   * Get issueDateTime
   * @return issueDateTime
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ISSUE_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocalDate getIssueDateTime() {
    return issueDateTime;
  }


  @JsonProperty(JSON_PROPERTY_ISSUE_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIssueDateTime(LocalDate issueDateTime) {
    this.issueDateTime = issueDateTime;
  }


  public EventSummary issueReasonDescription(String issueReasonDescription) {
    this.issueReasonDescription = issueReasonDescription;
    return this;
  }

   /**
   * Get issueReasonDescription
   * @return issueReasonDescription
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ISSUE_REASON_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIssueReasonDescription() {
    return issueReasonDescription;
  }


  @JsonProperty(JSON_PROPERTY_ISSUE_REASON_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIssueReasonDescription(String issueReasonDescription) {
    this.issueReasonDescription = issueReasonDescription;
  }


  public EventSummary authorizedDate(LocalDate authorizedDate) {
    this.authorizedDate = authorizedDate;
    return this;
  }

   /**
   * Get authorizedDate
   * @return authorizedDate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTHORIZED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocalDate getAuthorizedDate() {
    return authorizedDate;
  }


  @JsonProperty(JSON_PROPERTY_AUTHORIZED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthorizedDate(LocalDate authorizedDate) {
    this.authorizedDate = authorizedDate;
  }


  /**
   * Return true if this EventSummary object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventSummary eventSummary = (EventSummary) o;
    return Objects.equals(this.id, eventSummary.id) &&
        Objects.equals(this.eventTypeCode, eventSummary.eventTypeCode) &&
        Objects.equals(this.issueDateTime, eventSummary.issueDateTime) &&
        Objects.equals(this.issueReasonDescription, eventSummary.issueReasonDescription) &&
        Objects.equals(this.authorizedDate, eventSummary.authorizedDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, eventTypeCode, issueDateTime, issueReasonDescription, authorizedDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventSummary {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    eventTypeCode: ").append(toIndentedString(eventTypeCode)).append("\n");
    sb.append("    issueDateTime: ").append(toIndentedString(issueDateTime)).append("\n");
    sb.append("    issueReasonDescription: ").append(toIndentedString(issueReasonDescription)).append("\n");
    sb.append("    authorizedDate: ").append(toIndentedString(authorizedDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

